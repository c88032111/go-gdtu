// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-gdtu.proto

package bak

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Request: Ask device for public key corresponding to address_n path
// @start
// @next GdtuPublicKey
// @next Failure
type GdtuGetPublicKey struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuGetPublicKey) Reset()         { *m = GdtuGetPublicKey{} }
func (m *GdtuGetPublicKey) String() string { return proto.CompactTextString(m) }
func (*GdtuGetPublicKey) ProtoMessage()    {}
func (*GdtuGetPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{0}
}

func (m *GdtuGetPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuGetPublicKey.Unmarshal(m, b)
}
func (m *GdtuGetPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuGetPublicKey.Marshal(b, m, deterministic)
}
func (m *GdtuGetPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuGetPublicKey.Merge(m, src)
}
func (m *GdtuGetPublicKey) XXX_Size() int {
	return xxx_messageInfo_GdtuGetPublicKey.Size(m)
}
func (m *GdtuGetPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuGetPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuGetPublicKey proto.InternalMessageInfo

func (m *GdtuGetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GdtuGetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains public key derived from device private seed
// @end
type GdtuPublicKey struct {
	Node                 *HDNodeType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Xpub                 *string     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GdtuPublicKey) Reset()         { *m = GdtuPublicKey{} }
func (m *GdtuPublicKey) String() string { return proto.CompactTextString(m) }
func (*GdtuPublicKey) ProtoMessage()    {}
func (*GdtuPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{1}
}

func (m *GdtuPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuPublicKey.Unmarshal(m, b)
}
func (m *GdtuPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuPublicKey.Marshal(b, m, deterministic)
}
func (m *GdtuPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuPublicKey.Merge(m, src)
}
func (m *GdtuPublicKey) XXX_Size() int {
	return xxx_messageInfo_GdtuPublicKey.Size(m)
}
func (m *GdtuPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuPublicKey proto.InternalMessageInfo

func (m *GdtuPublicKey) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GdtuPublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

//*
// Request: Ask device for Gdtu address corresponding to address_n path
// @start
// @next GdtuAddress
// @next Failure
type GdtuGetAddress struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuGetAddress) Reset()         { *m = GdtuGetAddress{} }
func (m *GdtuGetAddress) String() string { return proto.CompactTextString(m) }
func (*GdtuGetAddress) ProtoMessage()    {}
func (*GdtuGetAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{2}
}

func (m *GdtuGetAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuGetAddress.Unmarshal(m, b)
}
func (m *GdtuGetAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuGetAddress.Marshal(b, m, deterministic)
}
func (m *GdtuGetAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuGetAddress.Merge(m, src)
}
func (m *GdtuGetAddress) XXX_Size() int {
	return xxx_messageInfo_GdtuGetAddress.Size(m)
}
func (m *GdtuGetAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuGetAddress.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuGetAddress proto.InternalMessageInfo

func (m *GdtuGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GdtuGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains an Gdtu address derived from device private seed
// @end
type GdtuAddress struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	AddressHex           *string  `protobuf:"bytes,2,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuAddress) Reset()         { *m = GdtuAddress{} }
func (m *GdtuAddress) String() string { return proto.CompactTextString(m) }
func (*GdtuAddress) ProtoMessage()    {}
func (*GdtuAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{3}
}

func (m *GdtuAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuAddress.Unmarshal(m, b)
}
func (m *GdtuAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuAddress.Marshal(b, m, deterministic)
}
func (m *GdtuAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuAddress.Merge(m, src)
}
func (m *GdtuAddress) XXX_Size() int {
	return xxx_messageInfo_GdtuAddress.Size(m)
}
func (m *GdtuAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuAddress.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuAddress proto.InternalMessageInfo

func (m *GdtuAddress) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *GdtuAddress) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next GdtuTxRequest
// @next Failure
type GdtuSignTx struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	ToBin                []byte   `protobuf:"bytes,5,opt,name=toBin" json:"toBin,omitempty"`
	ToHex                *string  `protobuf:"bytes,11,opt,name=toHex" json:"toHex,omitempty"`
	Value                []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk     []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength           *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ChainId              *uint32  `protobuf:"varint,9,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TxType               *uint32  `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuSignTx) Reset()         { *m = GdtuSignTx{} }
func (m *GdtuSignTx) String() string { return proto.CompactTextString(m) }
func (*GdtuSignTx) ProtoMessage()    {}
func (*GdtuSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{4}
}

func (m *GdtuSignTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuSignTx.Unmarshal(m, b)
}
func (m *GdtuSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuSignTx.Marshal(b, m, deterministic)
}
func (m *GdtuSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuSignTx.Merge(m, src)
}
func (m *GdtuSignTx) XXX_Size() int {
	return xxx_messageInfo_GdtuSignTx.Size(m)
}
func (m *GdtuSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuSignTx proto.InternalMessageInfo

func (m *GdtuSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GdtuSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *GdtuSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *GdtuSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *GdtuSignTx) GetToBin() []byte {
	if m != nil {
		return m.ToBin
	}
	return nil
}

func (m *GdtuSignTx) GetToHex() string {
	if m != nil && m.ToHex != nil {
		return *m.ToHex
	}
	return ""
}

func (m *GdtuSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GdtuSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *GdtuSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *GdtuSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *GdtuSignTx) GetTxType() uint32 {
	if m != nil && m.TxType != nil {
		return *m.TxType
	}
	return 0
}

//*
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next GdtuTxAck
type GdtuTxRequest struct {
	DataLength           *uint32  `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV           *uint32  `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR           []byte   `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS           []byte   `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuTxRequest) Reset()         { *m = GdtuTxRequest{} }
func (m *GdtuTxRequest) String() string { return proto.CompactTextString(m) }
func (*GdtuTxRequest) ProtoMessage()    {}
func (*GdtuTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{5}
}

func (m *GdtuTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuTxRequest.Unmarshal(m, b)
}
func (m *GdtuTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuTxRequest.Marshal(b, m, deterministic)
}
func (m *GdtuTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuTxRequest.Merge(m, src)
}
func (m *GdtuTxRequest) XXX_Size() int {
	return xxx_messageInfo_GdtuTxRequest.Size(m)
}
func (m *GdtuTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuTxRequest proto.InternalMessageInfo

func (m *GdtuTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *GdtuTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *GdtuTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *GdtuTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

//*
// Request: Transaction payload data.
// @next GdtuTxRequest
type GdtuTxAck struct {
	DataChunk            []byte   `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuTxAck) Reset()         { *m = GdtuTxAck{} }
func (m *GdtuTxAck) String() string { return proto.CompactTextString(m) }
func (*GdtuTxAck) ProtoMessage()    {}
func (*GdtuTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{6}
}

func (m *GdtuTxAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuTxAck.Unmarshal(m, b)
}
func (m *GdtuTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuTxAck.Marshal(b, m, deterministic)
}
func (m *GdtuTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuTxAck.Merge(m, src)
}
func (m *GdtuTxAck) XXX_Size() int {
	return xxx_messageInfo_GdtuTxAck.Size(m)
}
func (m *GdtuTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuTxAck proto.InternalMessageInfo

func (m *GdtuTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

//*
// Request: Ask device to sign message
// @start
// @next GdtuMessageSignature
// @next Failure
type GdtuSignMessage struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuSignMessage) Reset()         { *m = GdtuSignMessage{} }
func (m *GdtuSignMessage) String() string { return proto.CompactTextString(m) }
func (*GdtuSignMessage) ProtoMessage()    {}
func (*GdtuSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{7}
}

func (m *GdtuSignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuSignMessage.Unmarshal(m, b)
}
func (m *GdtuSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuSignMessage.Marshal(b, m, deterministic)
}
func (m *GdtuSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuSignMessage.Merge(m, src)
}
func (m *GdtuSignMessage) XXX_Size() int {
	return xxx_messageInfo_GdtuSignMessage.Size(m)
}
func (m *GdtuSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuSignMessage proto.InternalMessageInfo

func (m *GdtuSignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GdtuSignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

//*
// Response: Signed message
// @end
type GdtuMessageSignature struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	AddressHex           *string  `protobuf:"bytes,3,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuMessageSignature) Reset()         { *m = GdtuMessageSignature{} }
func (m *GdtuMessageSignature) String() string { return proto.CompactTextString(m) }
func (*GdtuMessageSignature) ProtoMessage()    {}
func (*GdtuMessageSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{8}
}

func (m *GdtuMessageSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuMessageSignature.Unmarshal(m, b)
}
func (m *GdtuMessageSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuMessageSignature.Marshal(b, m, deterministic)
}
func (m *GdtuMessageSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuMessageSignature.Merge(m, src)
}
func (m *GdtuMessageSignature) XXX_Size() int {
	return xxx_messageInfo_GdtuMessageSignature.Size(m)
}
func (m *GdtuMessageSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuMessageSignature.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuMessageSignature proto.InternalMessageInfo

func (m *GdtuMessageSignature) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *GdtuMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GdtuMessageSignature) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type GdtuVerifyMessage struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	AddressHex           *string  `protobuf:"bytes,4,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GdtuVerifyMessage) Reset()         { *m = GdtuVerifyMessage{} }
func (m *GdtuVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*GdtuVerifyMessage) ProtoMessage()    {}
func (*GdtuVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{9}
}

func (m *GdtuVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GdtuVerifyMessage.Unmarshal(m, b)
}
func (m *GdtuVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GdtuVerifyMessage.Marshal(b, m, deterministic)
}
func (m *GdtuVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GdtuVerifyMessage.Merge(m, src)
}
func (m *GdtuVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_GdtuVerifyMessage.Size(m)
}
func (m *GdtuVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GdtuVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GdtuVerifyMessage proto.InternalMessageInfo

func (m *GdtuVerifyMessage) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *GdtuVerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GdtuVerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GdtuVerifyMessage) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

func init() {
	proto.RegisterType((*GdtuGetPublicKey)(nil), "hw.trezor.messages.gdtu.GdtuGetPublicKey")
	proto.RegisterType((*GdtuPublicKey)(nil), "hw.trezor.messages.gdtu.GdtuPublicKey")
	proto.RegisterType((*GdtuGetAddress)(nil), "hw.trezor.messages.gdtu.GdtuGetAddress")
	proto.RegisterType((*GdtuAddress)(nil), "hw.trezor.messages.gdtu.GdtuAddress")
	proto.RegisterType((*GdtuSignTx)(nil), "hw.trezor.messages.gdtu.GdtuSignTx")
	proto.RegisterType((*GdtuTxRequest)(nil), "hw.trezor.messages.gdtu.GdtuTxRequest")
	proto.RegisterType((*GdtuTxAck)(nil), "hw.trezor.messages.gdtu.GdtuTxAck")
	proto.RegisterType((*GdtuSignMessage)(nil), "hw.trezor.messages.gdtu.GdtuSignMessage")
	proto.RegisterType((*GdtuMessageSignature)(nil), "hw.trezor.messages.gdtu.GdtuMessageSignature")
	proto.RegisterType((*GdtuVerifyMessage)(nil), "hw.trezor.messages.gdtu.GdtuVerifyMessage")
}

func init() { proto.RegisterFile("messages-gdtu.proto", fileDescriptor_cb33f46ba915f15c) }

var fileDescriptor_cb33f46ba915f15c = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x6f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x12, 0x4f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22,
	0x60, 0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x44, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x75,
	0x62, 0x22, 0x52, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x4f, 0x0a, 0x0d, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x65, 0x78, 0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x48, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x48, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x22, 0x2c, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x41, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x4a, 0x0a, 0x11, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x4f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x78, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x78, 0x42, 0x3e, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73,
	0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x13, 0x54, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5a,
	0x02, 0x2e, 0x2f,
}
